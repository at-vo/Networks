
#323
# container = [
#                 (32416188767, 5, 31888448878960195859890880991748349255041899817671327, 6500044117489012497118992793926395259372700134223312),
#                 (32416188127, 15, 3437258964153524604281715089711084598135220051816198641961890869670825819224378763559010461098245836315619564367377466443977645254790215502092180531486599705, 10528789297591535288380308031672678633870777142647620115598267383498637284869734513821541244560238686755680873897193046365273689668118176601824721339867835239),
#                 (32416188877, 17, 47229560256343069177512679111176571708553293796157725512748511321747567839196966068975129678865920078779613812017412203640770967373531350661183925061636080033002426968813784886657, 29934268091008137340141924389995261291181129168411292807867759482139280614856497309012294694971059725267540853670688313177650964451512734367178993973538767015851299672068923639615),
#             ]

# test 456
# container = [
# (32416190039, 14, 833493085710268899348279287951303568436828964897680359887684960508859188327960957229662882064493298594680705525010949369668863023754328002964436519, 589655852312919410622199041233883710505138372480908130065173328171871485251356498929402182407249843685408183868655301484781769940059255039238644584), 
# (32416188517, 20, 1194819298754009581615398171748904989587129128242808956489270091436217263157126316501716510359993856658830132755574662888106854574831770307709446081957050143427884560178995726875708517406991893343629988493169921, 172265200946721022448949847779558446567261075647590716959596310339497911055647252713623627928548584396849550564678852043352872156741499402350739803796034672206617673586038728374365527677162956813148322203003619),
# (32416189753, 8, 1090162157045994707666266644128228530161944380226103333638094425208412867440766725548, 1140551821233897511092938077366923725458699926632108662057625464192410014186222473568)
# ]

#test 
# container = [
#             ( 3 , 2 , 1 , 4 ),      # 7
#             ( 5 , 3 , 12 , 19 ),    # 12
#             ( 3 , 4 , 1 , 4 ),       # 79
#             (3,1,2,3)
#             ]


def solve(p,a,c,b):
    # check p divides c^2 - b
    check = (c**2) - b                       
    if check % p == 0:              
        pass
    else:
        return "invalid"

    d = 0
    find = False
    k = 0

    # check values of d against d^2 equiv to b mod p^a
    while(find==False):
        # d equiv to c mod p
        d = (p * k) + c     
        if (((d ** 2) - b) % (p ** a)) == 0:
            find = d
            break
        k+=1
        

    return find

# for i in container:
#     p = i[0]
#     a = i[1]
#     c = i[2]
#     b = i[3]
#     solv =solve(p, a, c, b)
#     if solv == "invalid":
#         print("{} does not divide {}^2 - {} ".format(p,c,b,solv))
#     else:
#         print("d is {}".format(solv))
