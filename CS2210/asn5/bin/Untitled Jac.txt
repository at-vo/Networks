public BusLines(String inputFile) throws MapException
	{ boolean first = false;
	int count = 0;
	String alphanum ="qwertyuiopasdfghjklzxcvbnm1234567890";
	try {
		BufferedReader in = new BufferedReader(new FileReader(inputFile));
		String temp;
		while(true)
		{
			temp = in.readLine();
			if (!first)
			{
				StringTokenizer i = new StringTokenizer(temp);
				i.nextToken();
				this.width= Integer.parseInt(i.nextToken());
				this.height = Integer.parseInt(i.nextToken());
				this.max = Integer.parseInt(i.nextToken());
				this.graph = new Graph(this.width*this.height);
				first = true;
			}
			else
			{
				if (temp == null)
					break;
				String temp2 = in.readLine();
				if(temp2 == null)
					break;
				for (int i = 0; i <temp.length(); i++)
				{
					if (i%2 == 0)
					{
						String check = "";
						check += temp2.charAt(i);
						if(alphanum.contains(check.toLowerCase()))
							this.graph.insertEdge(this.graph.getNode(count), this.graph.getNode(count+this.width), temp2.charAt(i));
						if(temp2.charAt(i) == 'S')
							this.S = this.graph.getNode(count);
						else if(temp2.charAt(i) == 'D')
							this.D = this.graph.getNode(count);
					}
					else if (i%2 == 1)
					{
						String check = "";
						check += temp.charAt(i);
						if(alphanum.contains(check.toLowerCase()))
							this.graph.insertEdge(this.graph.getNode(count), this.graph.getNode(count+1), temp.charAt(i));
						if(temp.charAt(i) == 'S')
							this.S = this.graph.getNode(count);
						else if(temp.charAt(i) == 'D')
							this.D = this.graph.getNode(count);
					}
					count++;



				}
			}

		}
		in.close();

	} catch (NumberFormatException | IOException e) {
		throw new MapException("file doesnt exist");
	} catch (GraphException e) {

	}


	}